##
# Prototype that renders a fusion-prototype as preview with applied props or propSets
#
prototype(Sitegeist.Monocle:Preview.Prototype) < prototype(Neos.Fusion:Component){
    prototypeName = null
    props = Neos.Fusion:RawArray
    propSet = null

    renderer = Neos.Fusion:Renderer {
        type = ${props.prototypeName}
        element {
            @apply {

                defaultProps = Neos.Fusion:Case {
                    directly {
                        condition = Sitegeist.Monocle:CanRender {
                            renderPath = ${'/<' + props.prototypeName + '>/__meta/styleguide/props'}
                        }
                        renderer = Neos.Fusion:Renderer {
                            renderPath = ${'/<' + props.prototypeName + '>/__meta/styleguide/props'}
                        }
                    }

                    asRawArray {
                        condition = true
                        renderer = Neos.Fusion:Renderer {
                            renderPath = ${'/<' + props.prototypeName + '>/__meta/styleguide/props<Neos.Fusion:RawArray>'}
                        }
                    }
                }

                selectedPropSet = Neos.Fusion:Case {
                    @if.has = ${props.propSet}
                    directly {
                        condition = Sitegeist.Monocle:CanRender {
                            renderPath = ${'/<' + props.prototypeName + '>/__meta/styleguide/propSets/' + props.propSet}
                        }
                        renderer = Neos.Fusion:Renderer {
                            renderPath = ${'/<' + props.prototypeName + '>/__meta/styleguide/propSets/' + props.propSet}
                        }
                    }

                    asRawArray {
                        condition = true
                        renderer = Neos.Fusion:Renderer {
                            renderPath = ${'/<' + props.prototypeName + '>/__meta/styleguide/propSets/' + props.propSet + '<Neos.Fusion:RawArray>'}
                        }
                    }
                }

                props = ${props.props}
            }
        }
    }
}
